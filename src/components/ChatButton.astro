<div id="chat-container" class="fixed z-50">
  <button
    id="chat-button"
    class="fixed bottom-6 right-6 bg-primary hover:bg-primary/80 text-white rounded-full shadow-xl hover:shadow-2xl transition-all duration-300 flex items-center justify-center gap-2 py-3 px-4 md:px-5 hover:translate-y-[-2px]"
    aria-label="Chat with Dan"
  >
    <div class="chat-icon-container relative w-6 h-6 flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 chat-bubble">
        <path fill-rule="evenodd" d="M12 2.25c-2.429 0-4.817.178-7.152.521C2.87 3.061 1.5 4.795 1.5 6.741v6.018c0 1.946 1.37 3.68 3.348 3.97.877.129 1.761.234 2.652.316V21a.75.75 0 001.28.53l4.184-4.183a.39.39 0 01.266-.112c2.006-.05 3.982-.22 5.922-.506 1.978-.29 3.348-2.023 3.348-3.97V6.741c0-1.947-1.37-3.68-3.348-3.97A49.145 49.145 0 0012 2.25z" clip-rule="evenodd" />
      </svg>
    </div>
    <span class="hidden md:inline font-medium">Chat with Dan</span>
  </button>

  <div 
    id="chat-interface" 
    class="fixed bottom-[90px] right-6 w-80 md:w-96 h-[450px] bg-light-fondo-primary dark:bg-dark-fondo-primary rounded-lg border border-primary shadow-xl flex flex-col chat-interface-animation"
    style="display: none; opacity: 0; transform: translateY(20px);"
  >
    <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-800 flex justify-between items-center">
      <div>
        <div class="font-semibold text-light-texto-primary dark:text-dark-texto-primary">Chat with Dan</div>
        <div class="flex items-center text-sm text-light-gray-primary dark:text-dark-gray-primary">
          <div class="flex items-center">
            <div class="h-1.5 w-1.5 rounded-full bg-green-500 mr-1"></div>
            <span>Online</span>
          </div>
        </div>
      </div>
      <button 
        id="close-chat"
        type="button" 
        class="text-light-gray-primary dark:text-dark-gray-primary hover:text-light-texto-primary dark:hover:text-dark-texto-primary flex items-center h-full"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <div class="flex-1 p-4 overflow-y-auto scrollbar-chat" id="chat-messages">
    </div>
    
    <div class="px-4 py-3 border-t border-gray-200 dark:border-gray-800">
      <div class="flex items-center gap-2">
        <input 
          type="text" 
          id="chat-input" 
          placeholder="Type a message..." 
          class="flex-1 px-3 py-2 bg-gray-100 dark:bg-dark-fondo-secondary text-light-texto-primary dark:text-dark-texto-primary rounded-lg border-none focus:outline-none"
        >
        <button id="send-button" class="bg-primary text-white p-2 rounded-lg hover:bg-primary/80 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-5 transform rotate-[-45deg] ml-1 mb-1">
            <path d="M3.478 2.404a.75.75 0 0 0-.926.941l2.432 7.905H13.5a.75.75 0 0 1 0 1.5H4.984l-2.432 7.905a.75.75 0 0 0 .926.94 60.519 60.519 0 0 0 18.445-8.986.75.75 0 0 0 0-1.218A60.517 60.517 0 0 0 3.478 2.404Z" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .chat-icon-container {
    animation: slant 1.5s ease-in-out infinite;
  }
  
  @keyframes slant {
    0% { transform: rotate(-5deg); }
    50% { transform: rotate(0deg); }
    100% { transform: rotate(5deg); }
  }

  .chat-interface-animation {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  #chat-messages {
    scrollbar-width: thin;
    scrollbar-color: rgba(0, 111, 255, 0.5) transparent;
    -webkit-overflow-scrolling: touch;
    overflow-y: auto;
    max-height: calc(100% - 2rem);
  }
  
  #chat-messages::-webkit-scrollbar {
    width: 6px;
  }
  
  #chat-messages::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #chat-messages::-webkit-scrollbar-thumb {
    background-color: rgba(0, 111, 255, 0.5);
    border-radius: 20px;
  }
  
  #chat-interface {
    display: flex;
    flex-direction: column;
    max-height: 80vh;
  }
  
  #chat-interface > div:not(#chat-messages) {
    flex-shrink: 0;
  }
  
  .markdown-content {
    line-height: 1.5;
  }
  
  .markdown-content p {
    margin-bottom: 0.75rem;
  }
  
  .markdown-content p:last-child {
    margin-bottom: 0;
  }
  
  .markdown-content a {
    color: #0066cc;
    text-decoration: underline;
  }
  
  .markdown-content strong {
    font-weight: 600;
  }
  
  .markdown-content em {
    font-style: italic;
  }
  
  .markdown-content ul, .markdown-content ol {
    margin-left: 1.5rem;
    margin-bottom: 0.75rem;
  }
  
  .markdown-content ul {
    list-style-type: disc;
  }
  
  .markdown-content ol {
    list-style-type: decimal;
  }
  
  .markdown-content code {
    font-family: monospace;
    background-color: rgba(0, 0, 0, 0.1);
    padding: 0.1rem 0.3rem;
    border-radius: 3px;
    font-size: 0.9em;
  }
  
  .markdown-content pre {
    background-color: rgba(0, 0, 0, 0.1);
    padding: 0.5rem;
    border-radius: 4px;
    margin-bottom: 0.75rem;
    overflow-x: auto;
  }
  
  .markdown-content pre code {
    background-color: transparent;
    padding: 0;
  }
  
  .markdown-content blockquote {
    border-left: 3px solid #ccc;
    padding-left: 0.75rem;
    margin-left: 0.75rem;
    font-style: italic;
    margin-bottom: 0.75rem;
    color: rgba(0, 0, 0, 0.7);
  }
  
  .dark .markdown-content blockquote {
    border-left-color: #666;
    color: rgba(255, 255, 255, 0.7);
  }
  
  .markdown-content h1, 
  .markdown-content h2, 
  .markdown-content h3, 
  .markdown-content h4, 
  .markdown-content h5, 
  .markdown-content h6 {
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
  }
  
  .markdown-content h1 { font-size: 1.5rem; }
  .markdown-content h2 { font-size: 1.3rem; }
  .markdown-content h3 { font-size: 1.2rem; }
  .markdown-content h4 { font-size: 1.1rem; }
  .markdown-content h5 { font-size: 1rem; }
  .markdown-content h6 { font-size: 0.9rem; }
</style>

<script is:inline>
  // Chat utility functions
  function createDanMessage(message) {
    const danMessageDiv = document.createElement('div');
    danMessageDiv.className = 'flex mb-4';
    
    let formattedMessage = '';
    try {
      if (window.md) {
        formattedMessage = window.md.render(message);
      } else {
        formattedMessage = message;
      }
    } catch (error) {
      console.error('Error rendering markdown:', error);
      formattedMessage = message;
    }
    
    danMessageDiv.innerHTML = `
      <div class="message-left relative max-w-[75%] bg-primary text-white rounded-tr-lg rounded-br-lg rounded-bl-lg py-2 px-3">
        <div class="absolute left-[-8px] top-0 w-0 h-0 border-t-[8px] border-t-transparent border-r-[12px] border-r-primary border-b-[0px] border-b-transparent"></div>
        <div class="markdown-content">${formattedMessage}</div>
      </div>
    `;
    
    const links = danMessageDiv.querySelectorAll('a');
    links.forEach(link => {
      link.setAttribute('target', '_blank');
      link.setAttribute('rel', 'noopener noreferrer');
    });
    
    return danMessageDiv;
  }

  function createUserMessage(message) {
    const userMessageDiv = document.createElement('div');
    userMessageDiv.className = 'flex justify-end mb-4';
    userMessageDiv.innerHTML = `
      <div class="message-right relative max-w-[75%] bg-gray-100 dark:bg-dark-fondo-secondary rounded-tl-lg rounded-bl-lg rounded-br-lg py-2 px-3 text-light-texto-primary dark:text-dark-texto-primary">
        <div class="absolute right-[-8px] top-0 w-0 h-0 border-t-[8px] border-t-transparent border-l-[12px] border-l-gray-100 dark:border-l-dark-fondo-secondary border-b-[0px] border-b-transparent"></div>
        <p>${message}</p>
      </div>
    `;
    return userMessageDiv;
  }

  function createTypingAnimation() {
    const typingDiv = document.createElement('div');
    typingDiv.className = 'flex mb-4';
    typingDiv.id = 'typing-animation-container';
    
    typingDiv.innerHTML = `
      <div class="message-left relative max-w-[75%] bg-primary text-white rounded-tr-lg rounded-br-lg rounded-bl-lg py-2 px-3">
        <div class="absolute left-[-8px] top-0 w-0 h-0 border-t-[8px] border-t-transparent border-r-[12px] border-r-primary border-b-[0px] border-b-transparent"></div>
        <div style="display:flex; justify-content:center; align-items:center; gap:5px;">
          <div id="dot1" style="width:6px; height:6px; background-color:white; border-radius:50%;"></div>
          <div id="dot2" style="width:6px; height:6px; background-color:white; border-radius:50%;"></div>
          <div id="dot3" style="width:6px; height:6px; background-color:white; border-radius:50%;"></div>
        </div>
      </div>
    `;
    
    setTimeout(() => {
      startDotAnimation(typingDiv);
    }, 100);
    
    return typingDiv;
  }

  function startDotAnimation(typingDiv) {
    const dot1 = typingDiv.querySelector('#dot1');
    const dot2 = typingDiv.querySelector('#dot2');
    const dot3 = typingDiv.querySelector('#dot3');
    
    if (!dot1 || !dot2 || !dot3) return;
    
    let step = 0;
    const animationInterval = setInterval(() => {
      if (!document.body.contains(typingDiv)) {
        clearInterval(animationInterval);
        return;
      }
      
      step = (step + 1) % 4;
      
      dot1.style.transform = 'translateY(0px)';
      dot2.style.transform = 'translateY(0px)';
      dot3.style.transform = 'translateY(0px)';
      
      if (step === 1) {
        dot1.style.transform = 'translateY(-5px)';
      } else if (step === 2) {
        dot2.style.transform = 'translateY(-5px)';
      } else if (step === 3) {
        dot3.style.transform = 'translateY(-5px)';
      }
    }, 200);
  }

  function removeTypingAnimation() {
    const typingElement = document.getElementById('typing-animation-container');
    if (typingElement) {
      typingElement.remove();
    }
  }

  function scrollToBottom(chatMessages, smooth = false) {
    if (chatMessages) {
      chatMessages.scrollTop = chatMessages.scrollHeight;
      if (smooth) {
        chatMessages.scrollTo({
          top: chatMessages.scrollHeight,
          behavior: 'smooth'
        });
      } else {
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
    }
  }

  function smoothScrollToMessage(chatMessages, messageElement) {
    if (!chatMessages || !messageElement) return;
    
    // Calculate the message top position relative to the scroll container
    const messageTop = messageElement.offsetTop;
    // Get the current scroll position
    const currentScroll = chatMessages.scrollTop;
    // Get the container height
    const containerHeight = chatMessages.clientHeight;
    
    // If message is already fully visible, no need to scroll
    if (messageTop >= currentScroll && 
        messageTop + messageElement.offsetHeight <= currentScroll + containerHeight) {
      return;
    }
    
    // Scroll to position the message near the top of the visible area
    const offset = containerHeight * 0.2; // 20% from the top
    const targetScroll = Math.max(0, messageTop - offset);
    
    chatMessages.scrollTo({
      top: targetScroll,
      behavior: 'smooth'
    });
  }

  async function sendToApi(userMessage, chatHistory, apiUrl, elements, preDelay, postDelay) {
    try {
      removeTypingAnimation();
      
      const typingAnimation = createTypingAnimation();
      elements.chatMessages.appendChild(typingAnimation);
      scrollToBottom(elements.chatMessages);
      
      await new Promise(resolve => setTimeout(resolve, preDelay));
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: userMessage,
          history: chatHistory
        }),
        mode: 'cors'
      });
      
      if (!response.ok) {
        throw new Error(`API responded with status: ${response.status}`);
      }
      
      const data = await response.json();
      
      let apiResponse = "Sorry, I couldn't process that request. Please try again.";
      if (data && data.response) {
        apiResponse = data.response;
      }
      
      await new Promise(resolve => setTimeout(resolve, postDelay));
      
      removeTypingAnimation();
      
      const danMessageDiv = createDanMessage(apiResponse);
      elements.chatMessages.appendChild(danMessageDiv);
      
      return {
        messageElement: danMessageDiv,
        content: apiResponse
      };
      
    } catch (error) {
      console.error('Error calling API:', error);
      
      removeTypingAnimation();
      
      const errorMessage = "Sorry, I'm having trouble connecting right now. Please try again later.";
      const errorElement = createDanMessage(errorMessage);
      elements.chatMessages.appendChild(errorElement);
      
      return {
        messageElement: errorElement,
        content: errorMessage
      };
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Load markdown-it script
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/markdown-it@13.0.1/dist/markdown-it.min.js';
    script.async = true;
    document.head.appendChild(script);
    
    script.onload = () => {
      window.md = window.markdownit({
        html: false,
        linkify: true,
        typographer: true
      });
      
      initChat();
    };
    
    function initChat() {
      const elements = {
        chatButton: document.getElementById('chat-button'),
        chatInterface: document.getElementById('chat-interface'),
        closeChat: document.getElementById('close-chat'),
        chatInput: document.getElementById('chat-input'),
        sendButton: document.getElementById('send-button'),
        chatMessages: document.getElementById('chat-messages')
      };
      
      const state = {
        chatHistory: [],
        isProcessing: false
      };
      
      const config = {
        apiUrl: 'https://api.dnachavez.dev/portfolio/chat.php',
        typingAnimationDuration: 2000,
        animationPreDelay: 1000,
        animationPostDelay: 500
      };
      
      const openChatInterface = () => {
        if (!elements.chatInterface) return;
        
        elements.chatInterface.style.display = 'flex';
        
        setTimeout(() => {
          elements.chatInterface.style.opacity = '1';
          elements.chatInterface.style.transform = 'translateY(0)';
          
          setTimeout(() => {
            elements.chatInput?.focus();
            
            if (elements.chatMessages && elements.chatMessages.children.length === 0) {
              showWelcomeSequence();
            }
            
            scrollToBottom(elements.chatMessages);
          }, 300);
        }, 10);
      };
      
      const closeChatInterface = () => {
        if (!elements.chatInterface) return;
        
        elements.chatInterface.style.opacity = '0';
        elements.chatInterface.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
          elements.chatInterface.style.display = 'none';
        }, 300);
      };
      
      const showWelcomeSequence = () => {
        const typingAnimation = createTypingAnimation();
        elements.chatMessages.appendChild(typingAnimation);
        scrollToBottom(elements.chatMessages);
        
        setTimeout(() => {
          removeTypingAnimation();
          
          const welcomeMessage = "Hi there! I'm Dan. How can I help you today?";
          const welcomeElement = createDanMessage(welcomeMessage);
          elements.chatMessages.appendChild(welcomeElement);
          
          state.chatHistory.push({
            role: 'assistant',
            content: welcomeMessage
          });
          
          smoothScrollToMessage(elements.chatMessages, welcomeElement);
        }, config.typingAnimationDuration);
      };
      
      const sendMessage = () => {
        const message = elements.chatInput?.value.trim();
        if (!message || !elements.chatMessages) return;
        
        if (elements.chatInput) elements.chatInput.disabled = true;
        if (elements.sendButton) elements.sendButton.disabled = true;
        
        const userMessageDiv = createUserMessage(message);
        elements.chatMessages.appendChild(userMessageDiv);
        
        state.chatHistory.push({
          role: 'user',
          content: message
        });
        
        if (elements.chatInput) elements.chatInput.value = '';
        
        scrollToBottom(elements.chatMessages, true);
        
        setTimeout(() => {
          sendToApi(
            message, 
            state.chatHistory, 
            config.apiUrl, 
            elements, 
            config.animationPreDelay, 
            config.animationPostDelay
          ).then(result => {
            if (result) {
              state.chatHistory.push({
                role: 'assistant',
                content: result.content
              });
              
              smoothScrollToMessage(elements.chatMessages, result.messageElement);
            }
            
            if (elements.chatInput) {
              elements.chatInput.disabled = false;
              elements.chatInput.focus();
            }
            if (elements.sendButton) elements.sendButton.disabled = false;
          }).catch(() => {
            if (elements.chatInput) {
              elements.chatInput.disabled = false;
              elements.chatInput.focus();
            }
            if (elements.sendButton) elements.sendButton.disabled = false;
          });
        }, 300);
      };
      
      elements.chatButton?.addEventListener('click', () => {
        if (elements.chatInterface) {
          if (elements.chatInterface.style.display === 'none') {
            openChatInterface();
          } else {
            closeChatInterface();
          }
        }
      });
      
      elements.closeChat?.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        closeChatInterface();
      });
      
      elements.sendButton?.addEventListener('click', sendMessage);
      
      elements.chatInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          sendMessage();
        }
      });
    }
  });
</script> 