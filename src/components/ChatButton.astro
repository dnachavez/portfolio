<div id="chat-container" class="fixed z-50">
  <button
    id="chat-button"
    class="fixed bottom-6 right-6 bg-primary hover:bg-primary/80 text-white rounded-full shadow-xl hover:shadow-2xl transition-all duration-300 flex items-center justify-center gap-2 py-3 px-4 md:px-5 hover:translate-y-[-2px]"
    aria-label="Chat with Dan"
  >
    <div class="chat-icon-container relative w-6 h-6 flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 chat-bubble">
        <path fill-rule="evenodd" d="M12 2.25c-2.429 0-4.817.178-7.152.521C2.87 3.061 1.5 4.795 1.5 6.741v6.018c0 1.946 1.37 3.68 3.348 3.97.877.129 1.761.234 2.652.316V21a.75.75 0 001.28.53l4.184-4.183a.39.39 0 01.266-.112c2.006-.05 3.982-.22 5.922-.506 1.978-.29 3.348-2.023 3.348-3.97V6.741c0-1.947-1.37-3.68-3.348-3.97A49.145 49.145 0 0012 2.25z" clip-rule="evenodd" />
      </svg>
    </div>
    <span class="hidden md:inline font-medium">Chat with Dan</span>
  </button>

  <div 
    id="chat-interface" 
    class="fixed bottom-[90px] right-6 w-80 md:w-96 h-[450px] bg-light-fondo-primary dark:bg-dark-fondo-primary rounded-lg border border-primary shadow-xl flex flex-col chat-interface-animation"
    style="display: none; opacity: 0; transform: translateY(20px);"
  >
    <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-800 flex justify-between items-center">
      <div>
        <div class="font-semibold text-light-texto-primary dark:text-dark-texto-primary">Chat with Dan</div>
        <div class="flex items-center text-sm text-light-gray-primary dark:text-dark-gray-primary">
          <div class="flex items-center">
            <div class="h-1.5 w-1.5 rounded-full bg-green-500 mr-1"></div>
            <span>Online</span>
          </div>
        </div>
      </div>
      <button 
        id="close-chat"
        type="button" 
        class="text-light-gray-primary dark:text-dark-gray-primary hover:text-light-texto-primary dark:hover:text-dark-texto-primary flex items-center h-full"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <div class="flex-1 p-4 overflow-y-auto scrollbar-chat" id="chat-messages">
      <!-- Initial message will be added by JavaScript -->
    </div>
    
    <div class="px-4 py-3 border-t border-gray-200 dark:border-gray-800">
      <div class="flex items-center gap-2">
        <input 
          type="text" 
          id="chat-input" 
          placeholder="Type a message..." 
          class="flex-1 px-3 py-2 bg-gray-100 dark:bg-dark-fondo-secondary text-light-texto-primary dark:text-dark-texto-primary rounded-lg border-none focus:outline-none"
        >
        <button id="send-button" class="bg-primary text-white p-2 rounded-lg hover:bg-primary/80 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-5 transform rotate-[-45deg] ml-1 mb-1">
            <path d="M3.478 2.404a.75.75 0 0 0-.926.941l2.432 7.905H13.5a.75.75 0 0 1 0 1.5H4.984l-2.432 7.905a.75.75 0 0 0 .926.94 60.519 60.519 0 0 0 18.445-8.986.75.75 0 0 0 0-1.218A60.517 60.517 0 0 0 3.478 2.404Z" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .chat-icon-container {
    animation: slant 1.5s ease-in-out infinite;
  }
  
  @keyframes slant {
    0% { transform: rotate(-5deg); }
    50% { transform: rotate(0deg); }
    100% { transform: rotate(5deg); }
  }

  .chat-interface-animation {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  #chat-messages {
    scrollbar-width: thin;
    scrollbar-color: rgba(0, 111, 255, 0.5) transparent;
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
    overflow-y: auto;
    max-height: calc(100% - 2rem); /* Ensure content is scrollable */
  }
  
  #chat-messages::-webkit-scrollbar {
    width: 6px;
  }
  
  #chat-messages::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #chat-messages::-webkit-scrollbar-thumb {
    background-color: rgba(0, 111, 255, 0.5);
    border-radius: 20px;
  }
  
  #chat-interface {
    display: flex;
    flex-direction: column;
    max-height: 80vh; /* Limit height on smaller screens */
  }
  
  #chat-interface > div:not(#chat-messages) {
    flex-shrink: 0;
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const elements = {
      chatButton: document.getElementById('chat-button'),
      chatInterface: document.getElementById('chat-interface'),
      closeChat: document.getElementById('close-chat'),
      chatInput: document.getElementById('chat-input'),
      sendButton: document.getElementById('send-button'),
      chatMessages: document.getElementById('chat-messages')
    };
    
    const state = {
      chatHistory: [],
      isProcessing: false
    };
    
    const config = {
      apiUrl: 'https://dnachavez.dev/gemini-proxy.php',
      typingAnimationDuration: 2000,  // Duration to show typing animation for initial message
      animationPreDelay: 1000,        // Time to show animation before API call
      animationPostDelay: 500         // Time to show animation after API call
    };
    
    const scrollToBottom = () => {
      if (elements.chatMessages) {
        elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
      }
    };
    
    const createDanMessage = (message) => {
      const danMessageDiv = document.createElement('div');
      danMessageDiv.className = 'flex mb-4';
      danMessageDiv.innerHTML = `
        <div class="message-left relative max-w-[75%] bg-primary text-white rounded-tr-lg rounded-br-lg rounded-bl-lg py-2 px-3">
          <div class="absolute left-[-8px] top-0 w-0 h-0 border-t-[8px] border-t-transparent border-r-[12px] border-r-primary border-b-[0px] border-b-transparent"></div>
          <p>${message}</p>
        </div>
      `;
      return danMessageDiv;
    };
    
    const createUserMessage = (message) => {
      const userMessageDiv = document.createElement('div');
      userMessageDiv.className = 'flex justify-end mb-4';
      userMessageDiv.innerHTML = `
        <div class="message-right relative max-w-[75%] bg-gray-100 dark:bg-dark-fondo-secondary rounded-tl-lg rounded-bl-lg rounded-br-lg py-2 px-3 text-light-texto-primary dark:text-dark-texto-primary">
          <div class="absolute right-[-8px] top-0 w-0 h-0 border-t-[8px] border-t-transparent border-l-[12px] border-l-gray-100 dark:border-l-dark-fondo-secondary border-b-[0px] border-b-transparent"></div>
          <p>${message}</p>
        </div>
      `;
      return userMessageDiv;
    };
    
    const createTypingAnimation = () => {
      const typingDiv = document.createElement('div');
      typingDiv.className = 'flex mb-4';
      typingDiv.id = 'typing-animation-container';
      
      typingDiv.innerHTML = `
        <div class="message-left relative max-w-[75%] bg-primary text-white rounded-tr-lg rounded-br-lg rounded-bl-lg py-2 px-3">
          <div class="absolute left-[-8px] top-0 w-0 h-0 border-t-[8px] border-t-transparent border-r-[12px] border-r-primary border-b-[0px] border-b-transparent"></div>
          <div style="display:flex; justify-content:center; align-items:center; gap:5px;">
            <div id="dot1" style="width:6px; height:6px; background-color:white; border-radius:50%;"></div>
            <div id="dot2" style="width:6px; height:6px; background-color:white; border-radius:50%;"></div>
            <div id="dot3" style="width:6px; height:6px; background-color:white; border-radius:50%;"></div>
          </div>
        </div>
      `;
      
      setTimeout(() => {
        startDotAnimation(typingDiv);
      }, 100);
      
      return typingDiv;
    };
    
    const startDotAnimation = (typingDiv) => {
      const dot1 = typingDiv.querySelector('#dot1');
      const dot2 = typingDiv.querySelector('#dot2');
      const dot3 = typingDiv.querySelector('#dot3');
      
      if (!dot1 || !dot2 || !dot3) return;
      
      let step = 0;
      const animationInterval = setInterval(() => {
        // Exit if the element was removed
        if (!document.body.contains(typingDiv)) {
          clearInterval(animationInterval);
          return;
        }
        
        step = (step + 1) % 4;
        
        // Reset all dots
        dot1.style.transform = 'translateY(0px)';
        dot2.style.transform = 'translateY(0px)';
        dot3.style.transform = 'translateY(0px)';
        
        // Animate one dot at a time
        if (step === 1) {
          dot1.style.transform = 'translateY(-5px)';
        } else if (step === 2) {
          dot2.style.transform = 'translateY(-5px)';
        } else if (step === 3) {
          dot3.style.transform = 'translateY(-5px)';
        }
      }, 200);
    };

    const openChatInterface = () => {
      if (!elements.chatInterface) return;
      
      elements.chatInterface.style.display = 'flex';
      
      setTimeout(() => {
        elements.chatInterface.style.opacity = '1';
        elements.chatInterface.style.transform = 'translateY(0)';
        
        setTimeout(() => {
          elements.chatInput?.focus();
          
          if (elements.chatMessages && elements.chatMessages.children.length === 0) {
            showWelcomeSequence();
          }
          
          scrollToBottom();
        }, 300);
      }, 10);
    };
    
    const closeChatInterface = () => {
      if (!elements.chatInterface) return;
      
      elements.chatInterface.style.opacity = '0';
      elements.chatInterface.style.transform = 'translateY(20px)';
      
      setTimeout(() => {
        elements.chatInterface.style.display = 'none';
      }, 300);
    };
    
    const showWelcomeSequence = () => {
      const typingAnimation = createTypingAnimation();
      elements.chatMessages.appendChild(typingAnimation);
      scrollToBottom();
      
      setTimeout(() => {
        removeTypingAnimation();
        
        const welcomeMessage = "Hi there! I'm Dan. How can I help you today?";
        const welcomeElement = createDanMessage(welcomeMessage);
        elements.chatMessages.appendChild(welcomeElement);
        
        state.chatHistory.push({
          role: 'assistant',
          content: welcomeMessage
        });
        
        scrollToBottom();
      }, config.typingAnimationDuration);
    };

    const removeTypingAnimation = () => {
      const typingElement = document.getElementById('typing-animation-container');
      if (typingElement) {
        typingElement.remove();
      }
    };
    
    const sendToApi = async (userMessage) => {
      if (state.isProcessing) return;
      
      state.isProcessing = true;
      
      try {
        removeTypingAnimation();
        
        const typingAnimation = createTypingAnimation();
        elements.chatMessages.appendChild(typingAnimation);
        scrollToBottom();
        
        await new Promise(resolve => setTimeout(resolve, config.animationPreDelay));
        
        const response = await fetch(config.apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            message: userMessage,
            history: state.chatHistory
          }),
          mode: 'cors'
        });
        
        if (!response.ok) {
          throw new Error(`API responded with status: ${response.status}`);
        }
        
        const data = await response.json();
        
        let apiResponse = "Sorry, I couldn't process that request. Please try again.";
        if (data && data.response) {
          apiResponse = data.response;
        }
        
        await new Promise(resolve => setTimeout(resolve, config.animationPostDelay));
        
        removeTypingAnimation();
        
        const danMessageDiv = createDanMessage(apiResponse);
        elements.chatMessages.appendChild(danMessageDiv);
        
        state.chatHistory.push({
          role: 'assistant',
          content: apiResponse
        });
        
        scrollToBottom();
        
      } catch (error) {
        console.error('Error calling API:', error);
        
        removeTypingAnimation();
        
        const errorMessage = "Sorry, I'm having trouble connecting right now. Please try again later.";
        const errorElement = createDanMessage(errorMessage);
        elements.chatMessages.appendChild(errorElement);
        
        state.chatHistory.push({
          role: 'assistant',
          content: errorMessage
        });
        
        scrollToBottom();
      } finally {
        state.isProcessing = false;
      }
    };
    
    const sendMessage = () => {
      const message = elements.chatInput?.value.trim();
      if (!message || !elements.chatMessages) return;
      
      if (elements.chatInput) elements.chatInput.disabled = true;
      if (elements.sendButton) elements.sendButton.disabled = true;
      
      const userMessageDiv = createUserMessage(message);
      elements.chatMessages.appendChild(userMessageDiv);
      
      state.chatHistory.push({
        role: 'user',
        content: message
      });
      
      if (elements.chatInput) elements.chatInput.value = '';
      
      scrollToBottom();
      
      setTimeout(() => {
        sendToApi(message).finally(() => {
          if (elements.chatInput) {
            elements.chatInput.disabled = false;
            elements.chatInput.focus();
          }
          if (elements.sendButton) elements.sendButton.disabled = false;
        });
      }, 300);
    };
    
    elements.chatButton?.addEventListener('click', () => {
      if (elements.chatInterface) {
        if (elements.chatInterface.style.display === 'none') {
          openChatInterface();
        } else {
          closeChatInterface();
        }
      }
    });
    
    elements.closeChat?.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      closeChatInterface();
    });
    
    elements.sendButton?.addEventListener('click', sendMessage);
    
    elements.chatInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });
  });
</script> 