---
import AccordionButton from "./AccordionButton.astro";
import TechItem from "./TechItem.astro";

const {
    id,
    jobPicture,
    jobTitle,
    jobTime,
    jobCompany,
    jobCompanySite,
    jobDescription,
    jobActivities,
    jobTechnologies,
} = Astro.props;

function calculateDuration(jobTime) {
    const [start, end] = jobTime.split(" - ");

    if (end.toLowerCase() === "present") {
        return null;
    }

    const startDate = new Date(start);
    const endDate = new Date(end);
    endDate.setMonth(endDate.getMonth() + 1);

    const diffInMonths = (endDate.getFullYear() - startDate.getFullYear()) * 12 + (endDate.getMonth() - startDate.getMonth());

    const years = Math.floor(diffInMonths / 12);
    const months = diffInMonths % 12;

    if (years > 0) {
        return years === 1 ? '(1 year)' : `(${years} years)`;
    } else {
        return months === 1 ? '(1 month)' : `(${months} months)`;
    }
}
---

<style>
    @media screen and (min-width: 640px) {
        .job-card:nth-child(2n) {
            transform: translateX(100%);
            padding-right: 0;
        }

        .job-card:nth-child(2n + 1) {
            padding-left: 0;
            padding-right: 1.5rem;
        }

        .job-card:nth-child(2n + 1) .job-picture {
            left: calc(100% + 2rem);
        }

        .job-card:nth-child(2n) .job-picture {
            left: calc(-120px - 2rem);
        }

        .job-card:nth-child(2n + 1) .circle {
            left: calc(100% - 10px);
        }
    }

    @media screen and (max-width: 639px) {
        .job-picture {
            pointer-events: none;
        }
    }

    .tooltip {
        position: absolute;
        display: none;
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 3px 12px;
        border-radius: 6px;
        font-size: 0.875rem;
        pointer-events: none;
        z-index: 20;
    }
</style>

<article class="job-card group relative flex flex-col pl-6 gap-4 sm:w-[50%] sm:even:translate-x-full pr-0 sm:odd:pl-0 odd:pr-6">
    <span class="circle gradient absolute top-0 left-[-10px] h-[24px] w-[24px] rounded-full z-[1]"></span>
    <div class="job-picture top-0 p-2 flex flex-col justify-center items-center gap-4 sm:absolute h-[120px] w-[120px] object-contain rounded-3xl cursor-pointer relative">
        {jobCompanySite ? (
            <a href={jobCompanySite} target="_blank" rel="noopener noreferrer">
                <img
                    class="w-full h-auto"
                    src={`/jobs/${jobPicture}`}
                    alt={`Logo of ${jobCompany} where I worked as a ${jobTitle}`}
                    loading="lazy"
                />
            </a>
        ) : (
            <img
                class="w-full h-auto"
                src={`/jobs/${jobPicture}`}
                alt={`Logo of ${jobCompany} where I worked as a ${jobTitle}`}
                loading="lazy"
            />
        )}
        <div class="tooltip">View</div>
    </div>
    <div class="flex flex-col justify-center">
        <div class="flex flex-col mb-4">
            <h1 class="text-light-texto-primary dark:text-dark-texto-primary font-black text-xl">
                {jobTitle}
            </h1>
            <span
                class="text-light-gray-primary dark:text-dark-gray-primary font-bold text-base"
                style="display: inline-flex; align-items: center; gap: 4px;"
            >
                {jobCompany}
            </span>
            <small class="mt-1 text-light-gray-primary dark:text-dark-gray-primary italic text-[0.91rem]">
                {jobTime} {calculateDuration(jobTime)}
            </small>
        </div>
        {jobDescription ? (
            <p class="text-[1.1rem] sm:text-base text-light-texto-secondary dark:text-dark-texto-secondary">
                {jobDescription}
            </p>
        ) : jobActivities && jobActivities.length > 0 ? (
            <div class="flex flex-col">
                <h2 class="text-light-texto-primary dark:text-dark-texto-primary font-bold">
                    Activities
                </h2>
                <ul class="ml-6 text-[1.1rem] sm:text-base text-light-texto-secondary dark:text-dark-texto-secondary list-outside list-disc">
                    <li>{jobActivities[0]}</li>
                </ul>
            </div>
        ) : null}
        <div class="job-accordion flex flex-col max-h-0 overflow-hidden transition-all gap-6 duration-300" id={`job-accordion-${id}`}>
            {!jobDescription && jobActivities && jobActivities.length > 1 ? (
                <div class="flex flex-col gap-2 mt-2">
                    <ul class="ml-6 text-light-texto-secondary dark:text-dark-texto-secondary list-outside list-disc">
                        {jobActivities.slice(1).map((activity) => <li>{activity}</li>)}
                    </ul>
                </div>
            ) : jobActivities && jobActivities.length > 0 ? (
                <div class="flex flex-col gap-2 mt-6">
                    <h2 class="text-light-texto-primary dark:text-dark-texto-primary font-bold">
                        Activities
                    </h2>
                    <ul class="ml-6 text-light-texto-secondary dark:text-dark-texto-secondary list-outside list-disc">
                        {jobActivities.map((activity) => <li>{activity}</li>)}
                    </ul>
                </div>
            ) : null}
            <div class="flex flex-col gap-2 mb-1">
                <h2 class="text-light-texto-primary dark:text-dark-texto-primary font-bold">
                    Technologies
                </h2>
                <ul class="flex flex-wrap gap-x-4 gap-y-2 mb-0 text-light-texto-secondary dark:text-dark-texto-secondary">
                    {
                        jobTechnologies.map((technology) => (
                            <TechItem
                                name={technology.name}
                                icon={technology.icon}
                            />
                        ))
                    }
                </ul>
            </div>
        </div>
        <button
            class="job-accordion-button group mt-6 w-fit justify-center py-3 px-5 pr-6 flex items-center gap-1 sm:gap-2 font-semibold text-base text-light-texto-secondary dark:text-dark-texto-secondary bg-[#0001] dark:bg-[#fff1] transition-colors rounded-3xl hover:bg-light-texto-primary dark:hover:bg-dark-texto-primary hover:text-light-fondo-primary dark:hover:text-dark-fondo-primary"
            data-target={`job-accordion-${id}`}
        >
            <svg
                class="group-[.expanded]:rotate-180 transition-transform"
                xmlns="http://www.w3.org/2000/svg"
                width="21"
                height="21"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                ><polyline points="6 9 12 15 18 9"></polyline></svg
            >
            <span class="flex group-[.expanded]:hidden">See more</span>
            <span class="hidden group-[.expanded]:flex">See less</span>
        </button>
    </div>
</article>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const jobAccordionButtons = document.querySelectorAll('.job-accordion-button');
    
    jobAccordionButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetId = this.getAttribute('data-target');
            const target = document.getElementById(targetId);
            
            if (this.classList.contains('expanded')) {
                target.style.maxHeight = "0";
                this.classList.remove('expanded');
            } else {
                target.style.maxHeight = target.scrollHeight + "px";
                this.classList.add('expanded');
            }
        });
    });

    // Tooltip functionality
    const jobCards = document.querySelectorAll('.job-card');
    
    jobCards.forEach((card) => {
        const jobPicture = card.querySelector('.job-picture');
        const tooltip = jobPicture.querySelector('.tooltip');
        
        jobPicture.addEventListener('mousemove', function(e) {
            if (window.innerWidth < 640) return; // Don't show tooltip on mobile
            
            const rect = jobPicture.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            tooltip.style.display = 'block';
            tooltip.style.left = `${x + 10}px`;
            tooltip.style.top = `${y + 10}px`;
        });
        
        jobPicture.addEventListener('mouseleave', function() {
            tooltip.style.display = 'none';
        });
    });
});
</script>
