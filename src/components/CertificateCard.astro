---
import { Carousel } from "./Carousel.jsx";

const {
    id,
    certificatePictures,
    certificateTitle,
    certificateTime,
    certificateAwarder,
    certificateSite,
    certificateDescription,
    certificateActivities,
} = Astro.props;
---

<style>
    @media screen and (min-width: 640px) {
        .certificate-card:nth-child(2n) {
            transform: translateX(100%);
            padding-right: 0;
        }

        .certificate-card:nth-child(2n + 1) {
            padding-left: 0;
            padding-right: 1.5rem;
        }

        .certificate-card:nth-child(2n + 1) .certificate-picture {
            left: calc(100% + 2rem);
        }

        .certificate-card:nth-child(2n) .certificate-picture {
            left: calc(-320px - 2rem);
        }

        .certificate-card:nth-child(2n + 1) .circle {
            left: calc(100% - 10px);
        }
    }

    @media screen and (max-width: 639px) {
        .certificate-picture {
            pointer-events: none;
        }
    }
</style>
<article
    class="certificate-card group relative flex flex-col pl-6 gap-4 sm:w-[50%] sm:even:translate-x-full pr-0 sm:odd:pl-0 odd:pr-6"
>
    <span
        class="circle gradient absolute top-0 left-[-10px] h-[24px] w-[24px] rounded-full z-[1]"
    ></span>
    <div
        class="certificate-picture top-0 sm:absolute h-[220px] w-[320px] object-contain rounded-3xl relative overflow-hidden bg-black"
    >
        <Carousel 
            client:visible 
            images={certificatePictures} 
            path={id} 
            type="certificates" 
            link={null}
        />
    </div>
    <div class="info flex flex-col justify-center">
        <div class="flex flex-col mb-4">
            <h1
                class="text-light-texto-primary dark:text-dark-texto-primary font-black text-xl"
            >
                {certificateTitle}
            </h1>
            {certificateSite ? (
                <a 
                    href={certificateSite} 
                    target="_blank" 
                    rel="noopener noreferrer" 
                    class="text-light-gray-primary dark:text-dark-gray-primary font-bold text-base hover:underline"
                    style="display: inline-flex; align-items: center; gap: 4px;"
                >
                    {certificateAwarder}
                    <svg
                        class="inline text-light-gray-primary dark:text-dark-gray-primary"
                        xmlns="http://www.w3.org/2000/svg"
                        width="14"
                        height="14"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                    >
                        <polyline points="15 3 21 3 21 9" />
                        <>
                            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
                            <line x1="10" y1="14" x2="21" y2="3" />
                        </>
                    </svg>
                </a>
            ) : (
                <span
                    class="text-light-gray-primary dark:text-dark-gray-primary font-bold text-base"
                    style="display: inline-flex; align-items: center; gap: 4px;"
                >
                    {certificateAwarder}
                </span>
            )}
            <small
                class="mt-1 text-light-gray-primary dark:text-dark-gray-primary italic text-[0.91rem]"
            >
                {certificateTime}
            </small>
        </div>
        <p
            class="text-[1.1rem] sm:text-base text-light-texto-secondary dark:text-dark-texto-secondary"
        >
            {certificateDescription}
        </p>
        <div class="cert-accordion flex flex-col max-h-0 overflow-hidden transition-all gap-6 duration-300" id={`cert-accordion-${id}`}>
            <div class="flex flex-col gap-2 mt-6">
                <h2 class="text-light-texto-primary dark:text-dark-texto-primary font-bold">
                    Achievements
                </h2>
                <ul class="ml-6 text-light-texto-secondary dark:text-dark-texto-secondary list-outside list-disc">
                    {certificateActivities.map((activity) => <li>{activity}</li>)}
                </ul>
            </div>
        </div>
        <button
            class="cert-accordion-button group mt-6 w-fit justify-center py-3 px-5 pr-6 flex items-center gap-1 sm:gap-2 font-semibold text-base text-light-texto-secondary dark:text-dark-texto-secondary bg-[#0001] dark:bg-[#fff1] transition-colors rounded-3xl hover:bg-light-texto-primary dark:hover:bg-dark-texto-primary hover:text-light-fondo-primary dark:hover:text-dark-fondo-primary"
            data-target={`cert-accordion-${id}`}
        >
            <svg
                class="group-[.expanded]:rotate-180 transition-transform"
                xmlns="http://www.w3.org/2000/svg"
                width="21"
                height="21"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                ><polyline points="6 9 12 15 18 9"></polyline></svg
            >
            <span class="flex group-[.expanded]:hidden">See more</span>
            <span class="hidden group-[.expanded]:flex">See less</span>
        </button>
    </div>
</article>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Accordion functionality
    const certAccordionButtons = document.querySelectorAll('.cert-accordion-button');
    certAccordionButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetId = this.getAttribute('data-target');
            const target = document.getElementById(targetId);
            
            if (this.classList.contains('expanded')) {
                target.style.maxHeight = "0";
                this.classList.remove('expanded');
            } else {
                target.style.maxHeight = target.scrollHeight + "px";
                this.classList.add('expanded');
            }
        });
    });
});
</script>
